library(rsconnect)
library(leaflet)
library(gapminder)
library(shiny)
library(here)
library(tidyverse)
PATH <- here("yolo.csv")

df.accomodations <- read_csv(PATH) %>% 
  mutate(available_start = as.Date(available_start, "%m/%d/%Y"), 
         available_end = as.Date(available_end, "%m/%d/%Y"))

ui <- fluidPage(
  h1("Yolo"),
  h2(paste0("last update:", Sys.time())), 
  
  

  
  
  sidebarLayout(
    sidebarPanel(
     
      
      
      dateRangeInput("date_range", h3("Starting Date Range")),
      h6("Pick a range for the start date to see accomodations that are availalbe then", 
         align = "center"),
      
      numericInput("people_count", 
               h3("Number Of People"), 
               value = 1), 
      
      h6("Enter number of people joining, assuming everyone staying for the entire trip", 
         align = "center")
      ), 
      
      
    
    
    mainPanel(
      DT::dataTableOutput("table"),
      
      leafletOutput("mymap"),
      p(),
      actionButton("show_location", "show me where i need to be")
      
    )
    ),
  
  
    # Replace the tableOutput() with DT's version
  
)

server <- function(input, output) {
  updated_data <- reactive({
    data <- df.accomodations
   
  
    
    # filter by person number
    data <- data %>% 
      filter(max_n > input$people_count | max_n == input$people_count) %>% 
      mutate(
        price_per_person = price_month / input$people_count
      ) %>% 
      relocate(c(price_per_person, price_month), .after = "housing_name")
    
    # filter by date 

    data <- data %>% 
      filter(available_start >= input$date_range[1] & 
             available_start <= input$date_range[2])  
    #         available_end <= input$date_range[2] &
    #         available_end >= input$date_range[1])
    
    
    data 
  })
  
  # Replace the renderTable() with DT's version
  output$table <- DT::renderDataTable({
    data <- updated_data()
    data
  })
  
  points <- eventReactive(input$recalc, {
    cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
  }, ignoreNULL = FALSE)
  
  output$mymap <- renderLeaflet({
    leaflet() %>%
      setView(-155.844437, 19.741755,  zoom = 8) %>% 
      addProviderTiles(providers$Stamen.TonerLite,
                       options = providerTileOptions(noWrap = TRUE)
      ) %>%
      addMarkers(data = points())
  })
  
}

shinyApp(ui, server)